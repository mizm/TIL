
#include <iostream>
using namespace std;
int map[751][751] = { 0, };
bool solve(int N, int M, int pos, int i, int j)
{
	bool check = true;
	int x1 = j, x2 = j, y = i;
	for (int k = 0; k < pos - 1; k++)
	{
		y++;
		x1++;
		x2--;
		check = x1 >= 0 && x1 < M && y >= 0 && y < N && map[y][x1];
		if (!check)
			return false;
		check = x2 >= 0 && x2 < M && y >= 0 && y < N && map[y][x2];
		if (!check)
			return false;
	}
	for (int k = 0; k < pos - 1; k++)
	{
		y++;
		x2++;
		x1--;
		check = x1 >= 0 && x1 < M && y >= 0 && y < N && map[y][x1];
		if (!check)
			return false;
		check = x2 >= 0 && x2 < M && y >= 0 && y < N && map[y][x2];
		if (!check)
			return false;
	}
	return true;
}
int main()
{
	int tc;
	
	cin >> tc;
	char temp[750];
	for (int t = 0; t < tc; t++)
	{
		int N, M;
		cin >> N >> M;
		for (int i = 0; i < N; i++)
		{
			//int temp = 0;
			cin >> temp;
			for (int j = 0; j < M; j++)
			{
				if (temp[j] == '1')
					map[i][j] = 1;
				else
					map[i][j] = 0;
				//map[i][M-j-1] = temp%10;
				//temp /= 10;
			}
		}
	
		int size = 0;
		if (N < M)
		{
			if (N % 2) size = N / 2 + 1;
			else
				size = N / 2;
		}
		else
		{
			if (M % 2) size = M / 2 + 1;
			else
				size = M / 2;
		}
		bool check = false;
		int res = 0;
		for (int k = size; k >= 0; k--)
		{
			if (k == 0) break;
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < M; j++)
				{
					if(map[i][j] == 1)
						check = solve(N, M, k,i,j);
						if (check) {
							res = k;
							break;
						}
				}
				if (check) {
					res = k;
					break;
				}
			}
			if (check) {
				res = k;
				break;
			}
		}
		printf("# %d %d", t+1,res);
	}
	return 0;
}