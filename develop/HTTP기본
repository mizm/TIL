1. 인터넷 네트워크
- 클라이언트와 서버는 복잡한 인터넷을 두고 연결되어있다.
## IP(인터넷 프로토콜)
    - IP주소
    - 지정한 ip 주소로 데이터 전달
    - 패킷이라는 통신 단위로 데이터를 전달한다
    - 패킷 정보
        - 출발지 ip , 목적지 ip , 기타
    - 서버에 도착하면 다시 패킷을 만들어서 돌아옴
    - 한계점
        - 비연결성 : 패킷을 받을 대상이 없거나 불능상태여도 패킷이 전송된다.
        - 비신뢰성 
            - 중간에 패킷이 사라질 수 있음
            - 패킷이 순서대로 안올수도있음
        - 프로그램 구분 : ip를 사용하는 서버에서 통신하는 어플리케이션이 둘 이상일때
## tcp udp
- tcp/ip 패킷 정보
    - 출발지 port, 목적지 port, 전송 제어, 순서, 검증정보 ...
    - 전송 제어 프로토콜
        - 연결지향 - tcp 3 way handshake(가상 연결)  연결을 한다 - 물리적 연결을 하는 것이 아닌 논리적 연결
            1. syn : 접속 요청 (클라이언트 -> 서버)
            2. ACK + syn : 요청 수락 (서버 -> 클라이언트)
            3. ack : (클라이언트 -> 서버)
            4. 데이터 전송 (3번과 함께 데이터를 전송한다.)
        - 데이터 전달 보증
            - 데이터 전송 후 서버에서 데이터 받았는지 리스폰스를 줌
        - 순서 보장
            1. 패킷 1, 패킷 2, 패킷 3 순서로 전송
            2. 패킷 1, 패킷 3, 패킷 2 순서로 도착
            3. 패킷 2부터 다시보내라고 함
- udp
    - 기능 없음
    - port , 체크섬 정도만 추가 됨
    - 속도가 빠름(어플리케이션에서 최적화할 수 있음)
    - 최근에 뜨는중 http 3와 함꼐
## port
- 같은 IP 내에서 프로스세스를 구분한다.
- 0~65535 할당 가능
- 0~1023 은 사용하지 않는게 좋음
    - ftp 20, 21
    - http 80
    - https 443
## dns ( domain name system )
- ip는 기억하기 어렵다.
- ip는 변경이 쉽다.
- 도메인 명을 IP 주소로 변환

## URI ( 리소스를 식별 한다. )
- URL(리소스 위치) URN(리소스 이름) 또는 둘다 추가로 분류될 수 있다.
- Uniform : 리소스를 식별하는 통일된 방식
- Resource : 자원, URI로 식별 할 수 있는 모든 것
- Identifier : 식별자
- url
    - http://example.com:8042/there?name=fettre
    - 리소스가 있는 위치
- urn
    - 리소스에 이름을 부여
    - urn:isbn:897000000313 책의 ibn
    - urn이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 x
- uri와 url은 거의 같은 의미이다.
## url 분석
- https://www.google.com/search?q=hello&hl=ko
    - scheme://[userinfo@]host[:port][/path][?query][#fragment]
    - scheme -> v프로토콜 ex http, https ftp
    - userinfo -> 거의 사용하지 않음
    - host -> 도메인명 아이피명
    - port -> 생략가능
    - path -> 리소스 경로, 계층적 구조
    - query -> key=value 형태 ?로 시작 &연결
    - fragment -> html 내부 북마크 등에 사용함

## 웹브라우저 요청 흐름
1. dns조회 , 포트 정보 조회
2. http 요청 메시지 생성
3. socket 라이브러리를 통해 전달 TCP/IP 연결 (3 handshake) eㅔ이터 전달
4. tcp/ip 패킷 정보 추가
5. 인터넷 망으로 감
6. 서버에서 도착 후 응답메세지 생성
7. 인터넷 망을 통해 클라이언트로 돌아온다.


## HTTP
- HTML, TEXT, IMG, 음성 영상 등등 파일 json, xml 등등 모든 전송이 가능
- http/1.1 가장 많이 사용 -> 2,3 버전은 성능 개선(점점 많이 사용하는 추세)
- 기반 프로토콜
    - tcp : http1.1 , http2
    - udp : http3
- 특징
    - 클라이언트 서버 구조
        - Request / Response 구조
        - 클라이언트는 서버에 요청을 보내고 대기
        - 서버가 요청에 대한 결과를 만들어서 응답한다.
        - 분리하면서 클라이언트는 UI 그리는 방법에 대해 집중
        - 서버는 비즈니스로직에 대해 집중
    - 무상태 프로토콜 (stateless), 비연결성
        - 서버가 클라이언트의 상태를 보존하지 않는다.( context를 보존하지 않는다.)
        - 상태 유지는 서버를 변경할 수 없다
        - 무상태는 서버를 변경할 수 있다 -> 확장 가능성(스케일 아웃에 확장 유리하다)
        - 한계점
            - 로그인이 필요하면 상태를 유지 해야한다.
            - 일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태를 유지한다.
            - 정보의 전송량이 많아진다.
    - 비연결성
        - tcp/ip 요청은 기본적으로 연결을 유지한다 ( 서버가 연결을 계속 유지해야한다 / 자원 소모)
        - 요청 응답 후 연결을 끊는다 ( 서버가 연결을 유지 하지 않기 때문에 최소한의 자원으로 서버 유지 가능)
        - 일반적으로 초 단위 이하의 빠른 속도로 응답한다.
        - 3 way handshake의 시간이 추가 된다.
        - psersistent connections - > 지속 연결으로 문제점 해결
    - http 메시지
        - start-line
            - 요청메시지
                - request-line : method request-target http-version
                - method : get / post / put / delete
                - request : 절대경로 + 쿼리
                - http-vesrsion
            - 응답 메시지
                - status-line : http-version status-code reason-phrase
        - header
            - field-name은 대소문자 구분한다.
            - http 전송에 필요한 모든 부가정보 저장 (content/type ....)
            - 임의의 헤더 추가가능
        - 공백
        - body
            - 실제 전송할 데이터
            - 바이트로 표현할 수 있는 모든 데이터 전송
    - 단순하고 확장 가능
        - 단순하다 스펙도 단순함

## Http 메서드
- API 설계 요구 사항
    - 회원 목록 조회
    - 회원 조회
    - 회원 등록
    - 회원 수정
    - 회원 삭제
- API URI 의 설계 방법
    - 리소스 식별이 가장 중요하다.
    - 회원을 등록하고 수정하고 조회하는건 리소스가 아니다!
    - ex) 미네랄을 캐라 -> 미네랄이 리소스
    - 회원이라는 개념 자체가 바로 리소스다
    - 식별방법
        - 등록하고 수정하고 조회하는 것을 모두 배제
        - `회원`이라는 리소스만 식별하면 된다.
    - 리소스와 행위를 분리한다.
         - uri 는 리소스만 식별한다.
         - 리소스 명사  회원
         - 행위 동사   조회, 등록, 삭제, 변경

## Http 메서드
- GET: 리소스 조회
    - 데이터는 query를 통해 저잘
    - 메시지 바드를 통해 전달할 수 있지만 권장하지 않음
    - get은 캐싱이 가능하다.
- POST: 요청 데이터 처리, 주로 등록에 사용
    - 메시지 바디를 통해 서버로 요청 데이터 전달
    - 프로세스 처리에 사용( html 폼 처리, 게시판 댓글달기, 글쓰기, 새 리소스 생성, 기존 자원에 데이터 추가)
    - 요청을 어떻게 처리할지 리소스마다 따로 정해야 한다.
    - 새 리소스 생성 (등록)
    - 요청 데이터 처리 : 주문에서 결제 완료 -> 배달시작 -> 배달 완료 처럼 값 변경을 넘어 프로세스의 상태가 변경되는 경우
        - post의 결과로 생성 안될수도 있음
    - 컨트롤 uri를 사용할 수 있음 /start-delivery 등등
    - 다른 메서드로 처리하기 애매한 경우
- PUT: 리소스를 완전히 대체, 해당 리소스가 없으면 생성
    - 수정을 하는 것이 아닌 완전히 대체하는 것
    - 클라이언트가 리소스를 식별한다!!!
        - 클라이언트가 리소스 위치를 알고 uri를 지정한다
- PATCH: 리소스 부분 변경
    - put 과 다르게 부분적으로 변경한다.
- DELETE: 리소스 삭제
- HEAD: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
- OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
- CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정
- TRACE: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행

## http 메서드 속성
- 안전
    - 호출해도 리소스를 변경하지 않는다.
    - 만약 로그가 쌓여서 장애가 발생한 것은 고려하지 않는다.
- 멱등
    - 한 번 호출하든 두 번 호출하든 100번 호출하든 결과가 똑같다.
    - get 언제든지 동일하다
    - put 결과를 대체한다 -> 같은 요청을 여러번 해도 최종 결과는 동일하다.
    - delete 같은 요청을 여러번 해도 삭제된 결과는 똑같다.
    - post 결제 요청을 두번 보내면 중복 결제가 된다  ( 멱등 하지 않음 )
    - 자동 복구 메커니즘에서 필요하다
        - 서버가 timeout 응답을 주었을 때 클라이언트가 다시 요청해도 되는가에 대한 판단 근거
    - 외부 요인은 고려하지 않는다
- 캐시 가능
    - 응답 결과를 캐시에서 사용 할 수 있는지
    - Get, Head, post, patch 캐시 가능
    - 실제로는 Get, Head 정도만 캐시로 사용한다.
        - post, patch가 캐시 키로 고려하기 힘듬
## http 메서드 활용
- 클라이언트에서 서버로 데이터 전송
    - 쿼리파라미터 통한 데이터 전송
        - get
        - 주로 정렬 필터(검색어)
    - 메시지 바디를 통한 데이터 전송
        - post, put, patch
        - 가입 상품주문 등등
- 데이터 전송 상황 4가지
    - 정적 데이터 조회
        - 쿼리 파라미터 미사용
        - 이미지, 정적 텍스트 문서
        - get
        - 정적 데이터는 일반적으로 경로로 단순하게 조회 가능
    - 동적 데이터 조회
        - 쿼리 파라미터 사용
        - 검색 , 정렬 필터
        - 조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
        - get
    - HTML Form 데이터 전송 (get, post만 사용 가능)
        - Form Content-Type 에 따라 달라짐
        - submit > Post 전송
        - get도 사용 가능하지만 소스 변경이 발생하는 곳에는 사용하지 말자.
        - multipart/form-data -> 파일 업로드 같은 바이너리 데이터 전송시 사용
    - HTTP API 데이터 전송
        - 서버 to 서버
        - 앱 클라이언트
        - 웹 클라이언트
            - js를 ajax를 통해 사용
        - post, put, patch 메시지 바디 사용
        - get 조회
        - Content-Type : application/json 을 주로 사용( 사실상 표준 )



 ## HTTP API 설계 예시
- API  설계 : Post 기반 등록(컬렉션)
    - 회원 목록 /members -> GET
    - 회원 등록 /members -> POST
    - 회원 조회 /members/{id} -> GET
    - 회원 수정 /members/{id} -> PATCH, PUT, POST 
    - 회원 삭제 /members/{id} -> DELETE
    - 클라이언트는 등록될 리소스의 uri를 모른다!!!!
    - 서버가 새로 등록된 리소스 uri를 생성해준다.
    - 컬렉션
        - 서버가 관리하는 리소스 디렉토리
        - 서버가 리소스의 uri를 생성하고 관리한다.
- API 설계 : Put 기반 등록 ( 스토어 ) 거의 없다.
    - 파일 목록 /files -> GET
    - 파일 조회 /files/{filename} -> GET 
    - 파일 등록 /files/{filename} -> PUT 
    - 파일 삭제 /files/{filename} -> DELETE 
    - 파일 대량 등록 /files -> POST
    - 클라이언트가 리소스 URI를 알고 있어야 한다.
        - put /files/{filename}
    - 클라이언트가 리소스의 직접 uri를 지정한다
    - 스토어
        - 클라이언트가 관리하는 리소스 저장소
        - 클라이언트가 리소스의 uri를 알고 관리한다.
- HTML FORM
    - 순수한 html form 은 get / post 만 사용 가능
    - 회원 목록 /members -> get
    - 회원 등록 폼 /members/new -> get
    - 회원 등록   /members/new -> post
    - 회원 조회   /members/{id} -> get
    - 회원 수정폼 /members/{id}/edit -> get
    - 회원 수정  /members/{id}/edit -> post
    - 회원 삭제 /members/{id}/delete -> post
    - control URI
        - 동사로 된 리소스 경로를 사용
        - http 메서드로 해결하기 애매한 경우 사용한다.
        - 대체로 사용하는 것이다.

## 정리
- 참고하면 좋은 URI 설계 개념
- https://restfulapi.net/resource-naming
- 문서(document)
    - 단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row)
    - 예) /members/100, /files/star.jpg 
- 컬렉션(collection)
    - 서버가 관리하는 리소스 디렉터리 
    - 서버가 리소스의 URI를 생성하고 관리 예) /members
- 스토어(store)
    - 클라이언트가 관리하는 자원 저장소
    - 클라이언트가 리소스의 URI를 알고 관리 예) /files
- 컨트롤러(controller), 컨트롤 URI
    - 문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
    - 동사를 직접 사용
    - 예) /members/{id}/delete

## 상태코드
- 2xx (Successful): 요청 정상 처리
    - 200 ok
        - 200 정도만 사용하는 경우가 많다.
    - 201 created
        - location header필드로 식별한다.
    - 202 accepted
        - 배치 처리 에서 사용 (잘 사용하지 않음)
    - 204 no content
        - save 같은 경우 사용
        - 응답 페이로드에 본문에 보낼 데이터가 없음.
- 3xx (Redirection): 요청을 완료하려면 브라우저의 추가 행동이 필요
    - location의 위치로 이동한다.
    - 영구 리다이렉션 - 특정 리소스의 uri가 영구적으로 이동
        - /event -> /new-event
        - 301 moved Permanently
            - 리다이렉트 시 요청 메서드가 get으로 변함 본문이 제거됨 (post -> get)
        - 308 permanent Redirect
            - 다이렉트 시 요청 메서드와 본문 유지(post -> post)
    - 일시 리다이렉션 - 일시적인 변경
        - 주문 완료 후 주문 내역 화념으로 이동
        - PRG : Post/Redirect/Get
            - Post로 주문 후에 웹 브라우저를 새로 고침(마지막 요청을 다시보냄) 하면 중복 주문이 될 수 있다.
            - Post 주문 후에 주문 결과 화면을 get메서드로 리다이렉트
            - 새로 고침해도 결과 화면을 get로 조회
        - 302 Found
            - 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
        - 307 Temporary Redirect
            - 302와 기능은 같음
            - 리다이렉트시 요청 메서드와 본문 유지(요청 메서드를 변경하면 안된다. MUST NOT) 
        - 303 See Other
            - 302와 기능은 같음
            - 리다이렉트시 요청 메서드가 GET으로 변경
    - 특수 리다이렉션 304
        - 결과 대신 캐시를 사용
        - 클라이언트에게 리소스가 수정되지 않았음을 알려준다. 캐시로 리다이렉트 한다.
        - 304 응답은 메시지 바디를 포함하면 안된다.
- 4xx (Client Error): 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
    - 오류의 원인이 클라이언트에 있음
    - 이미 클라이언트가 잘못된 요청을 보냈기 때문에 똑같은 재시도가 실패 한다.
    - 400 Bad Request
        - 요청 구문, 메시지 등등 오류
    - 401
        - 인증이 되지 않음
        - 인증 방법을 설명해 줘야 함
        - 인증 : 로그인 / 인가 : 권한 부여
    - 403
        - 인증은 되었지만 권한이 없음
    - 404
        - 리소스가 서버에 없음
        - 권한이 없어서 일부러 숨기기 위해서 404를 사용함
- 5xx (Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못함
    - 서버의 문제
    - 만약 비즈니스로직 상에 문제로 에러를 발생할 경우에는 500에러로 넘기지 말자
        - 500에러는 진짜 서버에서 문제가 있을때 (null point Exception) 등등에서만 나오게 한다.
    - 재시도 하면 성공할 수 있음(복구가 될수도있음)
    - 500
        - 애매한 오류는 다 이걸로 낸다
    - 503
        - 서비스 이용 불가

## HTTP 일반 헤더
- HTTP 전송에 필요한 모든 부가 정보
- ex) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보 등등
- 메시지 본문(message body)을 통해 표현 데이터 전달 메시지 본문 = 페이로드(payload)
- 표현은 요청이나 응답에서 전달할 실제 데이터
- 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
- 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
- 참고: 표현 헤더는 표현 메타데이터와, 페이로드 메시지를 구분해야 하지만, 여기서는 생략
- 표현(Representation)
    - 표현 메타데이터 + 표현 데이터
    - Content-Type: 표현 데이터의 형식 
    - Content-Encoding: 표현 데이터의 압축 방식 
    - Content-Language: 표현 데이터의 자연 언어 
    - Content-Length: 표현 데이터의 길이 바이트 단위
        - Transfer-Encoding 사용 시 Content-legnth 사용하면 안됨
- 협상 (콘텐츠 네고시에이션)
    - 클라이언트가 원하는 우선순위를 서버에서 적용해주는 것 / 요청시에만 사용한다.
    - Accept: 클라이언트가 선호하는 미디어 타입 전달
    - Accept-Charset: 클라이언트가 선호하는 문자 인코딩
    - Accept-Encoding: 클라이언트가 선호하는 압축 인코딩
    - Accept-Language: 클라이언트가 선호하는 자연 언어
- 협상과 우선순위1 Quality Values(q)
    ```http
    GET /event
    Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
    ```
    - Quality Values(q) 값 사용
    - 0~1, 클수록 높은 우선순위
    - 생략하면 1
    - Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
    1. ko-KR;q=1 (q생략)
    2. ko;q=0.9
    3. en-US;q=0.8 4. en:q=0.7
- 협상과 우선순위2 Quality Values(q)
    - 구체적인 것이 우선한다.
    - Accept: text/*, text/plain, text/plain;format=flowed, */* 
    1. text/plain;format=flowed
    2. text/plain
    3. text/*
    4. */*

## 전송방식
- 단순 전송
    - content-length를 응답으로 준다
- 압축 전송
    - 서버에서 gzip으로 압축
    - 클라이언트에서 풀어서 사용
- 분할 전송
    - chunked
    - 용량이 매우 큰 것을 분할해서 보낸다
    - content-length를 넣으면 안된다
- 범위 전송
    - 범위 지정해서 줌

## 일반 정보
- From: 유저 에이전트의 이메일 정보
- Referer: 이전 웹 페이지 주소 (많이 사용)
    - 유입 경로 분석 가능
- User-Agent: 유저 에이전트 애플리케이션 정보  
    - 클라이언트의 애플리케이션 정보
    - 통계 정보
- Server: 요청을 처리하는 오리진 서버의 소프트웨어 정보
- Date: 메시지가 생성된 날짜

## 특별한 정보
- Host: 요청한 호스트 정보(도메인) 필수값!
    - 요청에서 사용
    - 하나의 웹서버가 여러 도메인을 처리해야 할때
    - 하나의 ip 주소에 여러 도메인이 적용되어 있을 때
- Location: 페이지 리다이렉션
- Allow: 허용 가능한 HTTP 메서드
- Retry-After: 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간
    - 503 (Service Unavailable): 서비스가 언제까지 불능인지 알려줄 수 있음

## 인증
- Authorization: 클라이언트 인증 정보를 서버에 전달
    - 인증 방식에 따라 다름
- WWW-Authenticate: 리소스 접근시 필요한 인증 방법 정의
    - 리소스 접근시 필요한 인증 방법 정의

## 쿠키 
- Set-Cookie: 서버에서 클라이언트로 쿠키 전달(응답)
- Cookie: 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달
- 모든 요청에 쿠키 정보 자동 포함
- 사용처
    - 로그인 세션 관리
    - 광고 정보 트래킹
- 쿠키 정보는 항상 서버에 전송 됨
    - 네트워크 트래픽 추가 유발
    - 최소한의 정보만 사용
    - 서버에 전송하지 않고 웹브라우저에서 저장하고 싶으면 localStorage, sessionStorage
- 보안에 민감한 정보는 저장하지 말자
- 세션 쿠키 : 만료날짜 생략시 브라우저 종료시 까지만 유지
- 영속 쿠키 : 만료날짜까지 유지
- 도메인
    - 명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함
        - example.org + dev.example.org
    - 생략 : 생성한 도메인만 쿠키 사용
- 경로
    - 일반적으로 root (/) 로 지정
- 보안
    - secure -> https
    - httponly -> js에서 사용 불가
    - SameSite -> 요청 도메인 과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송


## 캐시와 조건부 요청
- 기본 동작
    - cache-control: max-age=60
        - max-age : 유효시간 초단위
        - no-cache : 데이터는 캐시해도 되지만, 항상 원(origin) 서버에 검증한다
        - no-store : 민감정보 있을 시 저장하지 않는다.
        - public : 퍼블릭캐시(cdn) 에 저장되어도 됨
        - private : 사용자 private 캐쉬에 저장된다.
    - Last-Modified: 2020년 11월 10일 10:00:00
    - 캐시 가능 시간 동안 네트워크를 사용하지 않는다.
- 검증 헤더
    - 캐시 시간 초과 후 다시 요청할 경우
        - 서버에서 기존 데이터를 변경함
        - 기존데이터가 변경하지 않음
    - 검증 헤더를 통해 기존 데이터가 변경되었느지 안되었늕지를 검증한다 -> 같으면 그대로 사용한다.
- 캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면
- 304 Not Modified + 헤더 메타 정보만 응답(바디X)
- 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
- 클라이언트는 캐시에 저장되어 있는 데이터 재활용
- 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
- 매우 실용적인 해결책
- Last-Modified
    - 1초 미만 단위로 캐시조정이 불가능
    - 날짜 기반의 로직 사용
    - 데이터 수정 후 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우 검증 불가
- 검증 헤더로 조건에 따른 분기
- If-Modified-Since: Last-Modified 사용 
- If-None-Match: ETag 사용
- 조건이 만족하면 200 OK
- 조건이 만족하지 않으면 304 Not Modifie
- ETag
    - 캐시용 데이터의 임이의 고유한 버전 이름을 달아둠
    - 진짜 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기!
    - 캐시 제어 로직을 서버에서 완전히 관리

## 캐쉬 무효화
- Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache
    - 확실하게 무효화 시키려면 해야함
- must-revalidate
    - 캐시 만료후 최초 조회시 원 서버에 검증해야함
    - 원 서버 접근 실패시 반드시 오류가 발생해야함 - 504(Gateway Timeout)
    - must-revalidate는 캐시 유효 시간이라면 캐시를 사용함
